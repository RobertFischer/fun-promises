{"version":3,"file":"deferral.js","sourceRoot":"","sources":["../../../../src/deferral.ts"],"names":[],"mappings":";AAAA,cAAc;;AAEd,+CAAuC;AACvC,sCAAgC;AAGhC;;;;;;;;GAQG;AACH,MAAqB,QAAQ;IAsC5B;;;OAGG;IACH;QAzCA;;WAEG;QACH;;;;;WAAgC;QAEhC;;WAEG;QACH;;;;mBAAmE,IAAI;WAAC;QAExE;;WAEG;QACH;;;;mBAA8D,IAAI;WAAC;QA6BlE,IAAI,CAAC,OAAO,GAAG,IAAI,qBAAU,CAC5B,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC/B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;QACxB,CAAC,CAAC,CACF,CAAC;IACH,CAAC;IAjCD;;OAEG;IACH,OAAO,CAAC,EAAE;QACT,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,QAAQ;YAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC3B,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,CAAQ;QACd,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,QAAQ;YAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC1B,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAeD;;OAEG;IACH,IAAI,WAAW;QACd,OAAO,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACH,MAAM;QACL,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACtB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,cAAK,CAAC,CAAC,CAAC,wCAAwC;YACnE,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;SACrB;IACF,CAAC;CACD;AAtED,2BAsEC","sourcesContent":["/** @format */\n\nimport FunPromise from \"./fun-promise\";\nimport _noop from \"lodash/noop\";\nimport type { Promisable } from \"./types\";\n\n/**\n * A class that is an \"inside-out\" [[`FunPromise`]]: the `resolve` and `reject` functions\n * from the callback are exposed as properties, and are therefore able to be called by\n * caller's code.\n *\n * Note that after the first call to either `resolve` or `reject`, the underlying promise\n * is settled. Any subsequent call to either `resolve` or `reject` is guaranteed to be\n * a no-op.\n */\nexport default class Deferral<T> {\n\t/**\n\t * The promise whose state is determined by `resolve` and `reject`.\n\t */\n\treadonly promise: FunPromise<T>;\n\n\t/**\n\t * The function used to resolve [[`promise`]].\n\t */\n\tprivate resolver: (it: Promisable<T>) => Promisable<void> | null = null;\n\n\t/**\n\t * The function used to reject [[`promise`]].\n\t */\n\tprivate rejector: (err: unknown) => Promisable<void> | null = null;\n\n\t/**\n\t * Resolves `promise` with the given value.\n\t */\n\tresolve(it) {\n\t\tconst { resolver } = this;\n\t\tthis.resolver = null;\n\t\tthis.rejector = null;\n\t\tif (resolver) resolver(it);\n\t\treturn this.promise;\n\t}\n\n\t/**\n\t * Rejects `promise` with the given cause.\n\t */\n\treject(e: Error) {\n\t\tconst { rejector } = this;\n\t\tthis.resolver = null;\n\t\tthis.rejector = null;\n\t\tif (rejector) rejector(e);\n\t\treturn this.promise;\n\t}\n\n\t/**\n\t * Constructs a new promise and exposes its resolve\n\t * and reject functions.\n\t */\n\tconstructor() {\n\t\tthis.promise = new FunPromise(\n\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\tthis.resolver = resolve;\n\t\t\t\tthis.rejector = reject;\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Whether or not the deferral is cancelled.\n\t */\n\tget isCancelled() {\n\t\treturn this.resolver === null;\n\t}\n\n\t/**\n\t * Cancels the deferral.  If the deferral is not settled, its callbacks will\n\t * never be called. If the deferral is settled or cancelled, this is a noop.\n\t */\n\tcancel() {\n\t\tif (!this.isCancelled) {\n\t\t\tthis.promise.catch(_noop); // Suppress \"UnhandledException\" errors.\n\t\t\tthis.reject(new Error(`Deferral was cancelled`));\n\t\t\tthis.resolver = null;\n\t\t\tthis.rejector = null;\n\t\t}\n\t}\n}\n"]}