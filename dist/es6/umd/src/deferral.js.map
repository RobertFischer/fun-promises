{"version":3,"file":"deferral.js","sourceRoot":"","sources":["../../../../src/deferral.ts"],"names":[],"mappings":"AAAA,cAAc;;;;;;;;;;;;IAEd,+CAAuC;IACvC,uBAAgC;IAGhC;;;;;;;;OAQG;IACH,MAAqB,QAAQ;QAgC5B;;;WAGG;QACH;YAnCA;;eAEG;YACH;;;;;eAAgC;YAEhC;;eAEG;YACH;;;;uBAAmE,IAAI;eAAC;YAExE;;eAEG;YACH;;;;uBAA8D,IAAI;eAAC;YAuBlE,IAAI,CAAC,OAAO,GAAG,IAAI,qBAAU,CAC5B,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC/B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;gBACxB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;YACxB,CAAC,CAAC,CACF,CAAC;QACH,CAAC;QA3BD;;WAEG;QACH,OAAO,CAAC,EAAE;YACT,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAClB,OAAO,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;QAED;;WAEG;QACH,MAAM,CAAC,CAAQ;YACd,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACjB,OAAO,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;KAcD;IA5CD,2BA4CC","sourcesContent":["/** @format */\n\nimport FunPromise from \"./fun-promise\";\nimport _noop from \"lodash/noop\";\nimport type { Promisable } from \"./types\";\n\n/**\n * A class that is an \"inside-out\" [[`FunPromise`]]: the `resolve` and `reject` functions\n * from the callback are exposed as properties, and are therefore able to be called by\n * caller's code.\n *\n * Note that after the first call to either `resolve` or `reject`, the underlying promise\n * is settled. Any subsequent call to either `resolve` or `reject` is guaranteed to be\n * a no-op.\n */\nexport default class Deferral<T> {\n\t/**\n\t * The promise whose state is determined by `resolve` and `reject`.\n\t */\n\treadonly promise: FunPromise<T>;\n\n\t/**\n\t * The function used to resolve [[`promise`]].\n\t */\n\tprivate resolver: (it: Promisable<T>) => Promisable<void> | null = null;\n\n\t/**\n\t * The function used to reject [[`promise`]].\n\t */\n\tprivate rejector: (err: unknown) => Promisable<void> | null = null;\n\n\t/**\n\t * Resolves `promise` with the given value.\n\t */\n\tresolve(it) {\n\t\tthis.resolver(it);\n\t\treturn this.promise;\n\t}\n\n\t/**\n\t * Rejects `promise` with the given cause.\n\t */\n\treject(e: Error) {\n\t\tthis.rejector(e);\n\t\treturn this.promise;\n\t}\n\n\t/**\n\t * Constructs a new promise and exposes its resolve\n\t * and reject functions.\n\t */\n\tconstructor() {\n\t\tthis.promise = new FunPromise(\n\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\tthis.resolver = resolve;\n\t\t\t\tthis.rejector = reject;\n\t\t\t})\n\t\t);\n\t}\n}\n"]}