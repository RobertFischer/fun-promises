{"version":3,"file":"deferral.js","sourceRoot":"","sources":["../../../src/deferral.ts"],"names":[],"mappings":"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","sourcesContent":["/** @format */\n\nimport FunPromise from \"./fun-promise\";\nimport { PromiseState, Promisable } from \"./types\";\nimport _defer from \"lodash/defer\";\nimport _noop from \"lodash/noop\";\n\n/**\n * A class that is an \"inside-out\" [[`FunPromise`]]: the `resolve` and `reject` functions\n * from the callback are exposed as properties, and are therefore able to be called by\n * caller's code.\n *\n * Note that after the first call to either `resolve` or `reject`, the underlying promise\n * is settled. Any subsequent call to either `resolve` or `reject` is guaranteed to be\n * a no-op.\n */\nexport default class Deferral<T> {\n\t/**\n\t * The promise whose state is determined by `resolve` and `reject`.\n\t */\n\treadonly promise: FunPromise<T>;\n\n\t/**\n\t * The state of `promise`.\n\t */\n\tprivate stateValue: PromiseState = PromiseState.Pending;\n\n\t/**\n\t * The function used to resolve [[`promise`]].\n\t */\n\tprivate resolver: (it: Promisable<T>) => Promisable<void> | null = null;\n\n\t/**\n\t * The function used to reject [[`promise`]].\n\t */\n\tprivate rejector: (err: unknown) => Promisable<void> | null = null;\n\n\t/**\n\t * Provides the state of `promise`.\n\t */\n\tget state() {\n\t\treturn this.stateValue;\n\t}\n\n\t/**\n\t * Whether `promise` is in the process of resolving or rejecting.\n\t */\n\tget isSettling() {\n\t\tswitch (this.stateValue) {\n\t\t\tcase PromiseState.Resolving:\n\t\t\t\treturn true;\n\t\t\tcase PromiseState.Rejecting:\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Whether `promise` has resolved or rejected.\n\t */\n\tget isSettled() {\n\t\tswitch (this.stateValue) {\n\t\t\tcase PromiseState.Resolved:\n\t\t\t\treturn true;\n\t\t\tcase PromiseState.Rejected:\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Whether `promise` has resolved.\n\t */\n\tget isResolved() {\n\t\treturn this.stateValue === PromiseState.Resolved;\n\t}\n\n\t/**\n\t * Whether `promise` was rejected.\n\t */\n\tget isRejected() {\n\t\treturn this.stateValue === PromiseState.Rejected;\n\t}\n\n\t/**\n\t * Resolves `promise` with the given value.\n\t */\n\tresolve(it) {\n\t\tconst { resolver } = this;\n\t\tif (resolver) {\n\t\t\ttry {\n\t\t\t\tconst { rejector } = this;\n\t\t\t\tthis.stateValue = PromiseState.Resolving;\n\t\t\t\t_defer(() => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresolver(it);\n\t\t\t\t\t\tthis.stateValue = PromiseState.Resolved;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (rejector) {\n\t\t\t\t\t\t\tthis.rejector = rejector;\n\t\t\t\t\t\t\tthis.reject(e);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn(`Uncaught exception during resolution`, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.reject(e);\n\t\t\t} finally {\n\t\t\t\tthis.resolver = null;\n\t\t\t\tthis.rejector = null;\n\t\t\t}\n\t\t}\n\t\treturn this.promise;\n\t}\n\n\t/**\n\t * Rejects `promise` with the given cause.\n\t */\n\treject(e: Error) {\n\t\tconst { rejector } = this;\n\t\tif (rejector) {\n\t\t\ttry {\n\t\t\t\tthis.stateValue = PromiseState.Rejecting;\n\t\t\t\t_defer(() => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\trejector(e);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis.stateValue = PromiseState.Rejected;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} finally {\n\t\t\t\tthis.resolver = null;\n\t\t\t\tthis.rejector = null;\n\t\t\t}\n\t\t}\n\t\treturn this.promise;\n\t}\n\n\t/**\n\t * Constructs a new promise and exposes its resolve\n\t * and reject functions.\n\t */\n\tconstructor() {\n\t\tthis.promise = new FunPromise(\n\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\tthis.resolver = resolve;\n\t\t\t\tthis.rejector = reject;\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Whether or not the deferral is cancelled.\n\t */\n\tget isCancelled() {\n\t\treturn !this.isSettled && this.resolver === null && this.resolver === null;\n\t}\n\n\t/**\n\t * Cancels the deferral.  If the deferral is not settled, its callbacks will\n\t * never be called. If the deferral is settled or cancelled, this is a noop.\n\t */\n\tcancel() {\n\t\tif (this.isSettled) return;\n\t\tthis.stateValue = PromiseState.Cancelled;\n\t\tthis.resolver = null;\n\t\tthis.rejector = null;\n\t\tthis.promise.catch(_noop); // Suppress \"UnhandledException\" errors.\n\t}\n}\n"]}