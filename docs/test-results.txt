$ jest --detectOpenHandles --forceExit ./*.test.js ./src/*.test.js --verbose
PASS src/fun-promise.test.js
  FunPromise
    ✓ can be constructed and resolved (2 ms)
    resolve/return
      resolve
        static
          resolves correctly
            ✓ with a value (1 ms)
            ✓ without a value (1 ms)
            ✓ rejects when provided a rejection (1 ms)
        instance
          resolves correctly
            ✓ with a value
            ✓ without a value (1 ms)
            ✓ rejects when provided a rejection (1 ms)
      return
        static
          resolves correctly
            ✓ with a value (1 ms)
            ✓ without a value (1 ms)
            ✓ rejects when provided a rejection
        instance
          resolves correctly
            ✓ with a value (1 ms)
            ✓ without a value
            ✓ rejects when provided a rejection (2 ms)
    then
      ✓ works without onrejected (1 ms)
    catch
      ✓ handles rejections (1 ms)
      ✓ returns the error when not passed an argument (1 ms)
    arrayify
      ✓ basically works (1 ms)
      ✓ returns a clone (1 ms)
      ✓ does not resolve values when called without an argument (9 ms)
      ✓ resolves values when called with the sole argument `true` (1 ms)
      ✓ rejects values when called with the sole argument `true` and a rejection in the mix
      ✓ rejects values in order when called with the arguments `(true, true)` (2 ms)
      ✓ resolves values in order when called with the arguments `(true, true)` (3 ms)
    all
      static
        basically works
          ✓ for 0 arguments (1 ms)
          ✓ for 1 arguments (1 ms)
          ✓ for 2 arguments
          ✓ for 3 arguments (1 ms)
          ✓ for 4 arguments (1 ms)
          ✓ for 5 arguments
          ✓ for 6 arguments (1 ms)
          ✓ for 7 arguments (2 ms)
          ✓ for 8 arguments
          ✓ for 9 arguments (1 ms)
      instance
        basically works
          ✓ for 0 arguments (1 ms)
          ✓ for 1 arguments (1 ms)
          ✓ for 2 arguments
          ✓ for 3 arguments (1 ms)
          ✓ for 4 arguments (1 ms)
          ✓ for 5 arguments
          ✓ for 6 arguments (1 ms)
          ✓ for 7 arguments (1 ms)
          ✓ for 8 arguments
          ✓ for 9 arguments
    try
      ✓ basically works (1 ms)
      ✓ works with one argument (1 ms)
      ✓ explodes properly
    map
      static
        ✓ basically works (1 ms)
        ✓ works with some test values (1 ms)
      instance
        ✓ basically works (1 ms)
        ✓ works with some test values
    Symbol.toStringTag
      ✓ is the same as the promise passed in
    finally
      ✓ returns the same promise when given no arguments (6 ms)
      ✓ executes on resolution (1 ms)
      ✓ executes on rejection (1 ms)
    reject
      static
        ✓ rejects correctly (1 ms)
        ✓ doesn't change the object that is rejected
      instance
        ✓ rejects correctly
        ✓ doesn't change the object that is rejected (1 ms)
    coalesce
      ✓ basically works (1 ms)
      ✓ returns the first resolving value (1019 ms)
      ✓ returns the value that passes the test (2 ms)
      ✓ throws the error if nothing passes the test (1 ms)
      ✓ punts appropriately after the first resolution (1 ms)
    delay
      static
        When requesting a delay of -1000 milliseconds
          basically works
            ✓ with no arg (1 ms)
            ✓ with one arg (2 ms)
        When requesting a delay of -1 milliseconds
          basically works
            ✓ with no arg
            ✓ with one arg (2 ms)
        When requesting a delay of 0 milliseconds
          basically works
            ✓ with no arg (1 ms)
            ✓ with one arg (1 ms)
        When requesting a delay of 1 milliseconds
          basically works
            ✓ with no arg (1 ms)
            ✓ with one arg (2 ms)
        When requesting a delay of 1000 milliseconds
          basically works
            ✓ with no arg (1 ms)
            ✓ with one arg (1000 ms)
      instance
        When requesting a delay of -1000 milliseconds
          basically works
            ✓ with no arg (1 ms)
            ✓ with one arg (1 ms)
        When requesting a delay of -1 milliseconds
          basically works
            ✓ with no arg (1 ms)
            ✓ with one arg (1 ms)
        When requesting a delay of 0 milliseconds
          basically works
            ✓ with no arg (1 ms)
            ✓ with one arg (1 ms)
        When requesting a delay of 1 milliseconds
          basically works
            ✓ with no arg (1 ms)
            ✓ with one arg (6 ms)
        When requesting a delay of 1000 milliseconds
          basically works
            ✓ with no arg (2 ms)
            ✓ with one arg (1001 ms)
    simplify
      ✓ basically works (1 ms)
    filter
      static
        ✓ basically works (4 ms)
      instance
        ✓ basically works (1 ms)
    flatMap
      static
        ✓ basically works (2 ms)
      instance
        ✓ basically works
    tap
      ✓ basically works (1 ms)
      ✓ rejects if it throws an exception
    fold
      static
        ✓ basically works (1 ms)
      instance
        ✓ basically works
    tapCatch
      ✓ basically works (1 ms)
      ✓ nests explosions (2 ms)
    tapEach
      ✓ basically works (1 ms)
    wrapError
      ✓ basically works (1 ms)
    wrapErrors
      ✓ basically works (2 ms)
      ✓ doesn't do anything if there is no error (1 ms)

(node:2606) UnhandledPromiseRejectionWarning: Error: Deferral was cancelled
(Use `node --trace-warnings ...` to show where the warning was created)
(node:2606) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 31)
(node:2606) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
PASS src/deferral.test.js
  Deferral
    ✓ can be constructed (1 ms)
    promise
      ✓ is a FunPromise (1 ms)
    resolve
      ✓ basically works (1 ms)
      ✓ does not change resolved value if called multiple times (1 ms)
    reject
      ✓ basically works (1 ms)
      ✓ does not change reason if called multiple times (1 ms)
    cancellation
      ✓ is initially not cancelled (1 ms)
      ✓ is cancelled after calling 'cancel' (1 ms)
      ✓ is safe to call 'cancel' multiple times (1 ms)
      ✓ prevents resolve from doing anything (1 ms)
      ✓ rejects with a known message (1 ms)

PASS ./assumptions.test.js
  lodash
    castArray
      ✓ DOES NOT turn iterables into arrays (2 ms)
    toArray
      ✓ does turn iterables into arrays (1 ms)

----------------|---------|----------|---------|---------|-------------------
File            | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
----------------|---------|----------|---------|---------|-------------------
All files       |     100 |      100 |     100 |     100 |                   
 deferral.ts    |     100 |      100 |     100 |     100 |                   
 fun-promise.ts |     100 |      100 |     100 |     100 |                   
----------------|---------|----------|---------|---------|-------------------

=============================== Coverage summary ===============================
Statements   : 100% ( 155/155 )
Branches     : 100% ( 32/32 )
Functions    : 100% ( 80/80 )
Lines        : 100% ( 132/132 )
================================================================================
Test Suites: 3 passed, 3 total
Tests:       111 passed, 111 total
Snapshots:   0 total
Time:        4.285 s, estimated 8 s
Ran all test suites matching /.\/assumptions.test.js|.\/src\/deferral.test.js|.\/src\/fun-promise.test.js/i.
